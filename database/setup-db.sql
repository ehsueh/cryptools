drop database `cryptools`;
create database `cryptools`;
use `cryptools`;

set FOREIGN_KEY_CHECKS = 0;

create table `strategy` (
  `id` int not null auto_increment,
  `name` varchar(30) not null,
  `code_file` varchar(30) not null,
  primary key (`id`),
  unique(`name`),
  unique(`code_file`)
) engine = InnoDB default charset = utf8mb4;

create table `agent` (
  `id` int not null auto_increment,
  `strategy_id` int not null,
  `param_file` varchar(30) not null,
  primary key (`id`),
  unique(`strategy_id`, `param_file`),
  foreign key (strategy_id) references `strategy`(id)
    on delete restrict on update cascade
) engine = InnoDB default charset = utf8mb4;

create table `run` (
  `id` int not null auto_increment,
  `exchange_id` int not null,
  `currency_pair_id` int not null,
  `agent_id` int not null,
  primary key (`id`),
  unique(`exchange_id`, `currency_pair_id`, `agent_id`),
  foreign key (exchange_id) references `exchange`(id)
    on delete restrict on update cascade,
  foreign key (currency_pair_id) references `currency_pair`(id)
    on delete restrict on update cascade,
  foreign key (agent_id) references `agent`(id)
    on delete restrict on update cascade
) engine = InnoDB default charset = utf8mb4;

create table `exchange` (
  `id` int not null auto_increment,
  `name` varchar(30) not null,
  primary key (`id`),
  unique(`name`)
) engine = InnoDB default charset = utf8mb4;

create table `currency`  (
  `id` int not null auto_increment,
  `symbol` varchar(10) not null,
  primary key(id),
  unique(`symbol`)
) engine = InnoDB default charset = utf8mb4;

create table `currency_pair`  (
  `id` int not null auto_increment,
  `base_id` int not null,
  `counter_id` int not null,
  primary key(id),
  unique(`base_id`, `counter_id`),
  foreign key (base_id) references `currency`(id)
    on delete restrict on update cascade,
  foreign key (counter_id) references `currency`(id)
    on delete restrict on update cascade
) engine = InnoDB default charset = utf8mb4;

/* Only keeping orders generated by ourselves,
 * orders from market / orderbook can be retrieved through exchange API
 */
create table `order_summary` (
  `id` int not null auto_increment,
  `timestamp` timestamp default current_timestamp on update current_timestamp, 
  `exchange_id` int not null,  
  `currency_pair_id` int not null,
  `order_number` varchar(30) not null, 
  `order_create_time` datetime not null,
  `run_id` int not null, 
  `type` int not null, # -1 : sell, +1 : buy
  `price` decimal(65,65) not null,
  `order_amount` decimal(65,65) not null, 
  `filled_amount` decimal(65,65) not null, 
  `fee` decimal(65,65),
  `status` int not null,
  primary key (`id`),
  foreign key (exchange_id) references `exchange`(id)
    on delete restrict on update cascade,
  foreign key (currency_pair_id) references `currency_pair`(id)
    on delete restrict on update cascade,
  foreign key (run_id) references `run`(id)
    on delete restrict on update cascade
) engine = InnoDB default charset = utf8mb4;

/* Stores the latest position only 
 * There should only be oneamount per (exchange, agent, currency_pair, price) combo
 */
create view `position` as select
  exchange_id,
  run_id, 
  currency_pair_id,
  price,
  sum(type * (order_amount - filled_amount)) as amount 
  from `order_summary`   
  group by exchange_id, run_id, currency_pair_id, price;
  
set FOREIGN_KEY_CHECKS = 1;